import { itemSummarySchema } from "./itemSummarySchema.gen";
import { z } from "@/utils/zod.ts";


export const evolutionChainDetailSchema = z.object({ "id": z.number().int(), "baby_trigger_item": z.lazy(() => itemSummarySchema), "chain": z.object({ "evolution_details": z.array(z.any()), "evolves_to": z.array(z.object({ "evolution_details": z.array(z.object({ "gender": z.object({ "name": z.string(), "url": z.string().url() }).nullable(), "held_item": z.object({ "name": z.string(), "url": z.string().url() }).nullable(), "item": z.object({ "name": z.string(), "url": z.string().url() }).nullable(), "known_move": z.any(), "known_move_type": z.any(), "location": z.object({ "name": z.string(), "url": z.string().url() }).nullable(), "min_affection": z.number().int().nullable(), "min_beauty": z.number().int().nullable(), "min_happiness": z.number().int().nullable(), "min_level": z.number().int().nullable(), "needs_overworld_rain": z.boolean().nullable(), "party_species": z.string().nullable(), "party_type": z.string().nullable(), "relative_physical_stats": z.string().nullable(), "time_of_day": z.string(), "trade_species": z.string().nullable(), "trigger": z.object({ "name": z.string(), "url": z.string().url() }), "turn_upside_down": z.boolean() })), "is_baby": z.boolean(), "species": z.object({ "name": z.string(), "url": z.string().url() }) })), "is_baby": z.boolean(), "species": z.object({ "name": z.string(), "url": z.string().url() }) }) });
export type EvolutionChainDetailSchema = z.infer<typeof evolutionChainDetailSchema>;