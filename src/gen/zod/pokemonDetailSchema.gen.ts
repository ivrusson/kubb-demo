import { pokemonFormSummarySchema } from "./pokemonFormSummarySchema.gen";
import { pokemonGameIndexSchema } from "./pokemonGameIndexSchema.gen";
import { pokemonSpeciesSummarySchema } from "./pokemonSpeciesSummarySchema.gen";
import { pokemonStatSchema } from "./pokemonStatSchema.gen";
import { z } from "@/utils/zod.ts";


export const pokemonDetailSchema = z.object({ "id": z.number().int(), "name": z.string().max(100), "base_experience": z.number().int().optional().nullable(), "height": z.number().int().optional().nullable(), "is_default": z.boolean().optional(), "order": z.number().int().optional().nullable(), "weight": z.number().int().optional().nullable(), "abilities": z.array(z.object({ "ability": z.object({ "name": z.string(), "url": z.string().url() }), "is_hidden": z.boolean(), "slot": z.number().int() })), "past_abilities": z.array(z.object({ "abilities": z.array(z.object({ "ability": z.object({ "name": z.string(), "url": z.string().url() }), "is_hidden": z.boolean(), "slot": z.number().int() })), "generation": z.object({ "name": z.string(), "url": z.string().url() }) })), "forms": z.array(z.lazy(() => pokemonFormSummarySchema)), "game_indices": z.array(z.lazy(() => pokemonGameIndexSchema)), "held_items": z.object({ "item": z.object({ "name": z.string(), "url": z.string().url() }), "version_details": z.array(z.object({ "rarity": z.number().int(), "version": z.object({ "name": z.string(), "url": z.string().url() }) })) }), "location_area_encounters": z.string(), "moves": z.array(z.object({ "move": z.object({ "name": z.string(), "url": z.string().url() }), "version_group_details": z.array(z.object({ "level_learned_at": z.number().int(), "move_learn_method": z.object({ "name": z.string(), "url": z.string().url() }), "version_group": z.object({ "name": z.string(), "url": z.string().url() }) })) })), "species": z.lazy(() => pokemonSpeciesSummarySchema), "sprites": z.object({ "front_default": z.string().url().optional() }).catchall(z.string().url().nullable()), "cries": z.object({ "latest": z.string().url(), "legacy": z.string().url() }), "stats": z.array(z.lazy(() => pokemonStatSchema)), "types": z.array(z.object({ "slot": z.number().int(), "type": z.object({ "name": z.string(), "url": z.string().url() }) })), "past_types": z.array(z.object({ "generation": z.object({ "name": z.string(), "url": z.string().url() }), "types": z.array(z.object({ "slot": z.number().int(), "type": z.object({ "name": z.string(), "url": z.string().url() }) })) })) });
export type PokemonDetailSchema = z.infer<typeof pokemonDetailSchema>;