import { createPokemonFormSummary } from "./createPokemonFormSummary";
import { createPokemonGameIndex } from "./createPokemonGameIndex";
import { createPokemonSpeciesSummary } from "./createPokemonSpeciesSummary";
import { createPokemonStat } from "./createPokemonStat";
import { faker } from "@faker-js/faker";
import type { PokemonDetailType } from "../ts/PokemonDetailType";


export function createPokemonDetail(data: NonNullable<Partial<PokemonDetailType>> = {}): NonNullable<PokemonDetailType> {
    faker.seed([100]);
    return {
        ...{ "id": faker.number.int(), "name": faker.string.alpha(), "base_experience": faker.number.int(), "height": faker.number.int(), "is_default": faker.datatype.boolean(), "order": faker.number.int(), "weight": faker.number.int(), "abilities": faker.helpers.arrayElements([{ "ability": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" }, "is_hidden": faker.datatype.boolean(), "slot": faker.number.int() }]) as any, "past_abilities": faker.helpers.arrayElements([{ "abilities": faker.helpers.arrayElements([{ "ability": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" }, "is_hidden": faker.datatype.boolean(), "slot": faker.number.int() }]) as any, "generation": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" } }]) as any, "forms": faker.helpers.arrayElements([createPokemonFormSummary()]) as any, "game_indices": faker.helpers.arrayElements([createPokemonGameIndex()]) as any, "held_items": { "item": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" }, "version_details": faker.helpers.arrayElements([{ "rarity": faker.number.int(), "version": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" } }]) as any }, "location_area_encounters": faker.string.alpha(), "moves": faker.helpers.arrayElements([{ "move": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" }, "version_group_details": faker.helpers.arrayElements([{ "level_learned_at": faker.number.int(), "move_learn_method": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" }, "version_group": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" } }]) as any }]) as any, "species": createPokemonSpeciesSummary(), "sprites": { "front_default": faker.helpers.arrayElement<any>([faker.string.alpha(), faker.internet.url()]) }, "cries": { "latest": faker.helpers.arrayElement<any>([faker.string.alpha(), faker.internet.url()]), "legacy": faker.helpers.arrayElement<any>([faker.string.alpha(), faker.internet.url()]) }, "stats": faker.helpers.arrayElements([createPokemonStat()]) as any, "types": faker.helpers.arrayElements([{ "slot": faker.number.int(), "type": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" } }]) as any, "past_types": faker.helpers.arrayElements([{ "generation": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" }, "types": faker.helpers.arrayElements([{ "slot": faker.number.int(), "type": { "name": faker.string.alpha(), "url": faker.internet.url() + "/" + faker.number.int(100) + "/" } }]) as any }]) as any },
        ...data
    };
}